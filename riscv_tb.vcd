$date
	Wed Aug 13 23:00:06 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module riscv_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var integer 32 # cycle_count [31:0] $end
$var integer 32 $ i [31:0] $end
$scope module uut $end
$var wire 1 % branch_taken $end
$var wire 1 ! clk $end
$var wire 1 & control_mux_sel $end
$var wire 1 " reset $end
$var wire 32 ' wb_reg_write_data [31:0] $end
$var wire 1 ( wb_reg_write $end
$var wire 32 ) wb_read_data [31:0] $end
$var wire 5 * wb_rd [4:0] $end
$var wire 1 + wb_mem_to_reg $end
$var wire 32 , wb_alu_result [31:0] $end
$var wire 1 - pc_write $end
$var wire 32 . pc_plus4 [31:0] $end
$var wire 32 / pc_next [31:0] $end
$var wire 32 0 pc_current [31:0] $end
$var wire 32 1 mem_rs2_data [31:0] $end
$var wire 1 2 mem_reg_write $end
$var wire 5 3 mem_rd [4:0] $end
$var wire 1 4 mem_mem_write $end
$var wire 1 5 mem_mem_to_reg $end
$var wire 1 6 mem_mem_read $end
$var wire 32 7 mem_forward_data [31:0] $end
$var wire 32 8 mem_data_out [31:0] $end
$var wire 32 9 mem_alu_result [31:0] $end
$var wire 1 : ifid_write $end
$var wire 32 ; if_instruction [31:0] $end
$var wire 5 < id_rs2 [4:0] $end
$var wire 5 = id_rs1 [4:0] $end
$var wire 1 > id_reg_write_final $end
$var wire 1 ? id_reg_write $end
$var wire 32 @ id_reg_data2 [31:0] $end
$var wire 32 A id_reg_data1 [31:0] $end
$var wire 5 B id_rd [4:0] $end
$var wire 32 C id_pc [31:0] $end
$var wire 7 D id_opcode [6:0] $end
$var wire 1 E id_mem_write_final $end
$var wire 1 F id_mem_write $end
$var wire 1 G id_mem_to_reg_final $end
$var wire 1 H id_mem_to_reg $end
$var wire 1 I id_mem_read_final $end
$var wire 1 J id_mem_read $end
$var wire 32 K id_instruction [31:0] $end
$var wire 32 L id_imm_out [31:0] $end
$var wire 7 M id_funct7 [6:0] $end
$var wire 3 N id_funct3 [2:0] $end
$var wire 1 O id_branch $end
$var wire 1 P id_alu_src_final $end
$var wire 1 Q id_alu_src $end
$var wire 2 R id_alu_op_final [1:0] $end
$var wire 2 S id_alu_op [1:0] $end
$var wire 1 T hazard_detected $end
$var wire 2 U forward_b [1:0] $end
$var wire 2 V forward_a [1:0] $end
$var wire 1 W ex_zero $end
$var wire 32 X ex_rs2_forwarded [31:0] $end
$var wire 32 Y ex_rs2_data [31:0] $end
$var wire 5 Z ex_rs2 [4:0] $end
$var wire 32 [ ex_rs1_data [31:0] $end
$var wire 5 \ ex_rs1 [4:0] $end
$var wire 1 ] ex_reg_write $end
$var wire 5 ^ ex_rd [4:0] $end
$var wire 1 _ ex_mem_write $end
$var wire 1 ` ex_mem_to_reg $end
$var wire 1 a ex_mem_read $end
$var wire 32 b ex_imm [31:0] $end
$var wire 6 c ex_funct_combined [5:0] $end
$var wire 7 d ex_funct7_full [6:0] $end
$var wire 1 e ex_funct7_bit5 $end
$var wire 3 f ex_funct3 [2:0] $end
$var wire 1 g ex_alu_src $end
$var wire 32 h ex_alu_result [31:0] $end
$var wire 2 i ex_alu_op [1:0] $end
$var wire 32 j ex_alu_in_b [31:0] $end
$var wire 32 k ex_alu_in_a [31:0] $end
$var wire 4 l ex_alu_ctrl [3:0] $end
$var wire 32 m branch_target [31:0] $end
$var reg 1 n branch_flush_reg $end
$var reg 1 o hazard_stall_reg $end
$scope module ALU $end
$var wire 32 p b [31:0] $end
$var wire 4 q alu_ctrl [3:0] $end
$var wire 32 r a [31:0] $end
$var reg 1 s carry $end
$var reg 1 t overflow $end
$var reg 32 u result [31:0] $end
$var reg 1 W zero $end
$upscope $end
$scope module ALUCTRL $end
$var wire 3 v funct3 [2:0] $end
$var wire 7 w funct7 [6:0] $end
$var wire 2 x alu_op [1:0] $end
$var reg 4 y alu_ctrl [3:0] $end
$upscope $end
$scope module CU $end
$var wire 7 z opcode [6:0] $end
$var reg 2 { alu_op [1:0] $end
$var reg 1 Q alu_src $end
$var reg 1 O branch $end
$var reg 1 J mem_read $end
$var reg 1 H mem_to_reg $end
$var reg 1 F mem_write $end
$var reg 1 ? reg_write $end
$upscope $end
$scope module DMEM $end
$var wire 1 ! clk $end
$var wire 1 | load_byte $end
$var wire 1 } store_byte $end
$var wire 32 ~ write_data [31:0] $end
$var wire 1 4 mem_write $end
$var wire 1 6 mem_read $end
$var wire 32 !" addr [31:0] $end
$var reg 32 "" read_data [31:0] $end
$var integer 32 #" i [31:0] $end
$upscope $end
$scope module EXMEM $end
$var wire 32 $" alu_result_in [31:0] $end
$var wire 1 ! clk $end
$var wire 1 %" enable $end
$var wire 1 " reset $end
$var wire 32 &" rs2_data_in [31:0] $end
$var wire 1 ] reg_write_in $end
$var wire 5 '" rd_in [4:0] $end
$var wire 1 _ mem_write_in $end
$var wire 1 ` mem_to_reg_in $end
$var wire 1 a mem_read_in $end
$var reg 32 (" alu_result_out [31:0] $end
$var reg 1 6 mem_read_out $end
$var reg 1 5 mem_to_reg_out $end
$var reg 1 4 mem_write_out $end
$var reg 5 )" rd_out [4:0] $end
$var reg 1 2 reg_write_out $end
$var reg 32 *" rs2_data_out [31:0] $end
$upscope $end
$scope module FU $end
$var wire 1 2 EX_MemRegwrite $end
$var wire 5 +" EX_MemWriteReg [4:0] $end
$var wire 5 ," Mem_WbWriteReg [4:0] $end
$var wire 1 ( Mem_WbRegwrite $end
$var wire 5 -" ID_Ex_Rt [4:0] $end
$var wire 5 ." ID_Ex_Rs [4:0] $end
$var reg 2 /" comparatorMux1Selector [1:0] $end
$var reg 2 0" comparatorMux2Selector [1:0] $end
$var reg 2 1" lowerMux_sel [1:0] $end
$var reg 2 2" upperMux_sel [1:0] $end
$upscope $end
$scope module HDU $end
$var wire 1 : IFIDWrite $end
$var wire 1 - PCWrite $end
$var wire 1 T control $end
$var wire 1 3" out $end
$var wire 1 4" w3 $end
$var wire 1 5" w2 $end
$var wire 1 6" w1 $end
$var wire 5 7" rd [4:0] $end
$var wire 1 a memrd $end
$var wire 32 8" ins [31:0] $end
$scope module r1 $end
$var wire 1 6" o $end
$var wire 7 9" op [6:0] $end
$var wire 5 :" rs1 [4:0] $end
$var wire 1 ;" w2 $end
$var wire 1 <" w1 $end
$var wire 5 =" rd [4:0] $end
$scope module c1 $end
$var wire 7 >" op [6:0] $end
$var wire 1 <" rs1 $end
$upscope $end
$upscope $end
$scope module r2 $end
$var wire 1 5" o $end
$var wire 7 ?" op [6:0] $end
$var wire 5 @" rs2 [4:0] $end
$var wire 1 A" w2 $end
$var wire 1 B" w1 $end
$var wire 5 C" rd [4:0] $end
$scope module c2 $end
$var wire 7 D" op [6:0] $end
$var wire 1 B" rs2 $end
$upscope $end
$upscope $end
$upscope $end
$scope module IDEX $end
$var wire 2 E" alu_op_in [1:0] $end
$var wire 1 P alu_src_in $end
$var wire 1 ! clk $end
$var wire 1 F" enable $end
$var wire 6 G" funct_in [5:0] $end
$var wire 1 I mem_read_in $end
$var wire 1 G mem_to_reg_in $end
$var wire 1 E mem_write_in $end
$var wire 6 H" opcode_in [5:0] $end
$var wire 32 I" pc_plus4_in [31:0] $end
$var wire 5 J" rd_in [4:0] $end
$var wire 1 K" reg_dst_in $end
$var wire 1 > reg_write_in $end
$var wire 1 " reset $end
$var wire 5 L" rs1_in [4:0] $end
$var wire 5 M" rs2_in [4:0] $end
$var wire 32 N" rs2_data_in [31:0] $end
$var wire 32 O" rs1_data_in [31:0] $end
$var wire 32 P" imm_in [31:0] $end
$var reg 2 Q" alu_op_out [1:0] $end
$var reg 1 g alu_src_out $end
$var reg 6 R" funct_out [5:0] $end
$var reg 32 S" imm_out [31:0] $end
$var reg 1 a mem_read_out $end
$var reg 1 ` mem_to_reg_out $end
$var reg 1 _ mem_write_out $end
$var reg 6 T" opcode_out [5:0] $end
$var reg 32 U" pc_plus4_out [31:0] $end
$var reg 5 V" rd_out [4:0] $end
$var reg 1 W" reg_dst_out $end
$var reg 1 ] reg_write_out $end
$var reg 32 X" rs1_data_out [31:0] $end
$var reg 5 Y" rs1_out [4:0] $end
$var reg 32 Z" rs2_data_out [31:0] $end
$var reg 5 [" rs2_out [4:0] $end
$upscope $end
$scope module IFID $end
$var wire 1 ! clk $end
$var wire 1 : enable $end
$var wire 1 \" reset $end
$var wire 32 ]" pc_in [31:0] $end
$var wire 32 ^" instr_in [31:0] $end
$var reg 32 _" instr_out [31:0] $end
$var reg 32 `" pc_out [31:0] $end
$upscope $end
$scope module IMEM $end
$var wire 1 a" clk $end
$var wire 32 b" inst_input [31:0] $end
$var wire 32 c" instruction [31:0] $end
$var wire 1 d" write $end
$var wire 32 e" addr [31:0] $end
$upscope $end
$scope module IMM $end
$var wire 32 f" instr [31:0] $end
$var wire 7 g" opcode [6:0] $end
$var reg 32 h" imm_out [31:0] $end
$upscope $end
$scope module MEMWB $end
$var wire 32 i" alu_result_in [31:0] $end
$var wire 1 ! clk $end
$var wire 1 j" enable $end
$var wire 1 5 mem_to_reg_in $end
$var wire 5 k" rd_in [4:0] $end
$var wire 32 l" read_data_in [31:0] $end
$var wire 1 2 reg_write_in $end
$var wire 1 " reset $end
$var reg 32 m" alu_result_out [31:0] $end
$var reg 1 + mem_to_reg_out $end
$var reg 5 n" rd_out [4:0] $end
$var reg 32 o" read_data_out [31:0] $end
$var reg 1 ( reg_write_out $end
$upscope $end
$scope module MUX_ALU_A $end
$var wire 2 p" cont_mux [1:0] $end
$var wire 32 q" in1_mux [31:0] $end
$var wire 32 r" in2_mux [31:0] $end
$var wire 32 s" in3_mux [31:0] $end
$var wire 32 t" out_mux [31:0] $end
$upscope $end
$scope module MUX_ALU_B_FWD $end
$var wire 2 u" cont_mux [1:0] $end
$var wire 32 v" in1_mux [31:0] $end
$var wire 32 w" in2_mux [31:0] $end
$var wire 32 x" in3_mux [31:0] $end
$var wire 32 y" out_mux [31:0] $end
$upscope $end
$scope module PCREG $end
$var wire 1 ! clk $end
$var wire 32 z" pc_in [31:0] $end
$var wire 1 " reset $end
$var reg 32 {" pc_out [31:0] $end
$upscope $end
$scope module RF $end
$var wire 1 ! clk $end
$var wire 5 |" rd [4:0] $end
$var wire 1 ( reg_write $end
$var wire 5 }" rs1 [4:0] $end
$var wire 5 ~" rs2 [4:0] $end
$var wire 32 !# write_data [31:0] $end
$var reg 32 "# read_data1 [31:0] $end
$var reg 32 ## read_data2 [31:0] $end
$var integer 32 $# i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b100000 $#
b0 ##
b0 "#
b0 !#
b0 ~"
b0 }"
b0 |"
b0 {"
b100 z"
b0 y"
b0 x"
b0 w"
b0 v"
b0 u"
b0 t"
b0 s"
b0 r"
b0 q"
b0 p"
b0 o"
b0 n"
b0 m"
b0 l"
b0 k"
1j"
b0 i"
b0 h"
b0 g"
b0 f"
b0 e"
zd"
bx c"
bz b"
za"
b0 `"
b0 _"
bx ^"
b0 ]"
1\"
b0 ["
b0 Z"
b0 Y"
b0 X"
0W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
b0 M"
b0 L"
0K"
b0 J"
b100 I"
b0 H"
b0 G"
1F"
b0 E"
b0 D"
b0 C"
0B"
1A"
b0 @"
b0 ?"
b0 >"
b0 ="
1<"
1;"
b0 :"
b0 9"
b0 8"
b0 7"
16"
05"
14"
03"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
1%"
b0 $"
b1000000000000 #"
b0 ""
b0 !"
b0 ~
0}
0|
b0 {
b0 z
b10 y
b0 x
b0 w
b0 v
b0 u
0t
0s
b0 r
b10 q
b0 p
0o
0n
b0 m
b10 l
b0 k
b0 j
b0 i
b0 h
0g
b0 f
0e
b0 d
b0 c
b0 b
0a
0`
0_
b0 ^
0]
b0 \
b0 [
b0 Z
b0 Y
b0 X
1W
b0 V
b0 U
0T
b0 S
b0 R
0Q
0P
0O
b0 N
b0 M
b0 L
b0 K
0J
0I
0H
0G
0F
0E
b0 D
b0 C
b0 B
b0 A
b0 @
0?
0>
b0 =
b0 <
bx ;
1:
b0 9
b0 8
b0 7
06
05
04
b0 3
02
b0 1
b0 0
b100 /
b100 .
1-
b0 ,
0+
b0 *
b0 )
0(
b0 '
0&
0%
bx $
b0 #
1"
0!
$end
#5000
1!
#10000
0!
#15000
1!
#20000
0!
#25000
1!
#30000
0\"
0!
b1010000011 ;
b1010000011 ^"
b1010000011 c"
0"
#35000
1P
1I
1G
1>
b1000 z"
1Q
1J
1H
1?
b10100000000001000100011 ;
b10100000000001000100011 ^"
b10100000000001000100011 c"
b1000 /
b11 g"
b11 9"
b11 >"
b11 ?"
b11 D"
b101 B
b101 J"
b11 D
b11 z
b1000 .
b100 0
b100 ]"
b100 e"
b100 {"
b100 U"
b1010000011 K
b1010000011 8"
b1010000011 _"
b1010000011 f"
b1 #
1!
#40000
0!
#45000
15"
06"
1B"
0;"
0P
0I
0G
0>
1&
0-
0:
b1000 z"
b1111 @
b1111 N"
b1111 ##
b1000 H"
1F
0J
0H
0?
1T
13"
b1000000010000101000001100110011 ;
b1000000010000101000001100110011 ^"
b1000000010000101000001100110011 c"
b1100 /
b100011 g"
b100011 9"
b100011 >"
b101 @"
b100011 ?"
b100011 D"
b101 <
b101 M"
b101 ~"
b100 B
b100 J"
b100011 D
b100011 z
b100 L
b100 P"
b100 h"
b101 ^
b101 '"
b101 7"
b101 ="
b101 C"
b101 V"
1g
1a
1`
1]
b1100 .
b1000 0
b1000 ]"
b1000 e"
b1000 {"
b1000 m
b1000 I"
b100 C
b100 `"
b10100000000001000100011 K
b10100000000001000100011 8"
b10100000000001000100011 _"
b10100000000001000100011 f"
b10 #
1!
#50000
0!
#55000
05"
16"
0A"
1;"
0W
0t
0s
b1111 h
b1111 u
b1111 $"
b1100 z"
1P
1E
b1111 j
b1111 p
1-
1:
b1111 7
b1111 s"
b1111 x"
0&
b1111 X
b1111 &"
b1111 y"
0T
03"
b1111 8
b1111 ""
b1111 l"
b1 0"
b10 U
b10 1"
b10 u"
b1000 U"
b1000 T"
b100 ^
b100 '"
b100 7"
b100 ="
b100 C"
b100 V"
b101 Z
b101 -"
b101 ["
b100 b
b100 S"
b1111 Y
b1111 Z"
b1111 v"
0g
0a
0`
0]
b101 3
b101 )"
b101 +"
b101 k"
16
15
12
1o
b11 #
1!
#60000
0!
#65000
06"
15"
0;"
1A"
b10 R
b10 E"
0P
0E
1>
b100 h
b100 u
b100 $"
b10000 z"
b1000 G"
b1011 @
b1011 N"
b1011 ##
b1111 A
b1111 O"
b1111 "#
b1100 H"
b10 S
b10 {
0Q
0F
1?
b1111 '
b1111 r"
b1111 w"
b1111 !#
b0 8
b0 ""
b0 l"
b10 0"
b1 U
b1 1"
b1 u"
b100 j
b100 p
b11000110110001110110011 ;
b11000110110001110110011 ^"
b11000110110001110110011 c"
b10000 /
b110011 g"
b101 :"
b110011 9"
b110011 >"
b100 @"
b110011 ?"
b110011 D"
b100000 M
b100 <
b100 M"
b100 ~"
b101 =
b101 L"
b101 }"
b110 B
b110 J"
b110011 D
b110011 z
b0 L
b0 P"
b0 h"
0o
b101 *
b101 ,"
b101 n"
b101 |"
b1111 )
b1111 o"
1+
1(
b100 3
b100 )"
b100 +"
b100 k"
b1111 1
b1111 ~
b1111 *"
b1111 9
b1111 !"
b1111 ("
b1111 i"
06
05
02
1g
1_
b10000 .
b1100 0
b1100 ]"
b1100 e"
b1100 {"
b1000 m
b1100 I"
b1000 C
b1000 `"
b1000000010000101000001100110011 K
b1000000010000101000001100110011 8"
b1000000010000101000001100110011 _"
b1000000010000101000001100110011 f"
b100 #
1!
#70000
0!
#75000
16"
1;"
b10100 z"
b110 l
b110 q
b110 y
b100 h
b100 u
b100 $"
b1011 X
b1011 &"
b1011 y"
b0 @
b0 N"
b0 ##
b0 A
b0 O"
b0 "#
b1111000000000110010000010011 ;
b1111000000000110010000010011 ^"
b1111000000000110010000010011 c"
b10100 /
b100000 d
b100000 w
1e
b1111 k
b1111 r
b1111 t"
b1011 j
b1011 p
b100 7
b100 s"
b100 x"
b0 0"
b0 U
b0 1"
b0 u"
b110 :"
b110 @"
b0 M
b110 <
b110 M"
b110 ~"
b110 =
b110 L"
b110 }"
b110 G"
b110 N
b111 B
b111 J"
b10100 .
b10000 0
b10000 ]"
b10000 e"
b10000 {"
b1100 U"
b1100 T"
b1000 c
b1000 R"
b110 ^
b110 '"
b110 7"
b110 ="
b110 C"
b110 V"
b100 Z
b100 -"
b100 ["
b101 \
b101 ."
b101 Y"
b0 b
b0 S"
b1011 Y
b1011 Z"
b1011 v"
b1111 [
b1111 X"
b1111 q"
b10 i
b10 x
b10 Q"
0g
0_
1]
b100 9
b100 !"
b100 ("
b100 i"
14
b100 *
b100 ,"
b100 n"
b100 |"
b1111 ,
b1111 m"
b0 )
b0 o"
0+
0(
b1100 m
b10000 I"
b1100 C
b1100 `"
b11000110110001110110011 K
b11000110110001110110011 8"
b11000110110001110110011 _"
b11000110110001110110011 f"
b101 #
1!
#80000
0!
#85000
04"
05"
06"
0B"
0A"
0;"
0W
1P
b1 l
b1 q
b1 y
b100 j
b100 p
b100 h
b100 u
b100 $"
b11000 z"
b11110000 L
b11110000 P"
b11110000 h"
b100 H"
1Q
b100 '
b100 r"
b100 w"
b100 !#
b0 d
b0 w
0e
b110 f
b110 v
b1 0"
b10 U
b10 1"
b10 u"
b1 /"
b10 V
b10 2"
b10 p"
b100 X
b100 &"
b100 y"
b100 k
b100 r
b100 t"
b11001000101010010110011 ;
b11001000101010010110011 ^"
b11001000101010010110011 c"
b11000 /
b10011 g"
b0 :"
b10011 9"
b10011 >"
b10000 @"
b10011 ?"
b10011 D"
b111 M
b10000 <
b10000 M"
b10000 ~"
b0 =
b0 L"
b0 }"
b1000 B
b1000 J"
b10011 D
b10011 z
b100 ,
b100 m"
b110 3
b110 )"
b110 +"
b110 k"
b1011 1
b1011 ~
b1011 *"
04
12
b10000 U"
b110 c
b110 R"
b111 ^
b111 '"
b111 7"
b111 ="
b111 C"
b111 V"
b110 Z
b110 -"
b110 ["
b110 \
b110 ."
b110 Y"
b0 Y
b0 Z"
b0 v"
b0 [
b0 X"
b0 q"
b11000 .
b10100 0
b10100 ]"
b10100 e"
b10100 {"
b100000000 m
b10100 I"
b10000 C
b10000 `"
b1111000000000110010000010011 K
b1111000000000110010000010011 8"
b1111000000000110010000010011 _"
b1111000000000110010000010011 f"
b110 #
1!
#90000
0!
#95000
14"
15"
16"
1B"
1A"
1;"
0P
b11100 z"
b11110000 h
b11110000 u
b11110000 $"
b0 X
b0 &"
b0 y"
b0 k
b0 r
b0 t"
b1100 H"
0Q
b11100110000001001100011 ;
b11100110000001001100011 ^"
b11100110000001001100011 c"
b11100 /
b11110000 j
b11110000 p
b0 0"
b0 /"
b0 U
b0 1"
b0 u"
b0 V
b0 2"
b0 p"
b110011 g"
b1000 :"
b110011 9"
b110011 >"
b110 @"
b110011 ?"
b110011 D"
b0 M
b110 <
b110 M"
b110 ~"
b1000 =
b1000 L"
b1000 }"
b101 G"
b101 N
b1001 B
b1001 J"
b110011 D
b110011 z
b0 L
b0 P"
b0 h"
b11100 .
b11000 0
b11000 ]"
b11000 e"
b11000 {"
b10100 U"
b100 T"
b1000 ^
b1000 '"
b1000 7"
b1000 ="
b1000 C"
b1000 V"
b10000 Z
b10000 -"
b10000 ["
b0 \
b0 ."
b0 Y"
b11110000 b
b11110000 S"
1g
b111 3
b111 )"
b111 +"
b111 k"
b100 1
b100 ~
b100 *"
b110 *
b110 ,"
b110 n"
b110 |"
1(
b10100 m
b11000 I"
b10100 C
b10100 `"
b11001000101010010110011 K
b11001000101010010110011 8"
b11001000101010010110011 _"
b11001000101010010110011 f"
b111 #
1!
#100000
b100 @
b100 N"
b100 ##
0!
#105000
06"
0;"
b1 R
b1 E"
0>
b1001 l
b1001 q
b1001 y
b11110000 k
b11110000 r
b11110000 t"
0W
b1111 h
b1111 u
b1111 $"
b100000 z"
b100 L
b100 P"
b100 h"
b0 @
b0 N"
b0 ##
b100 A
b100 O"
b100 "#
b11000 H"
1O
b1 S
b1 {
0?
b11110000 7
b11110000 s"
b11110000 x"
b101 f
b101 v
b1 /"
b10 V
b10 2"
b10 p"
b100 X
b100 &"
b100 y"
b100 j
b100 p
b110010000000000010100010011 ;
b110010000000000010100010011 ^"
b110010000000000010100010011 c"
b100000 /
b1100011 g"
b110 :"
b1100011 9"
b1100011 >"
b111 @"
b1100011 ?"
b1100011 D"
b111 <
b111 M"
b111 ~"
b110 =
b110 L"
b110 }"
b0 G"
b0 N
b100 B
b100 J"
b1100011 D
b1100011 z
b111 *
b111 ,"
b111 n"
b111 |"
b1000 3
b1000 )"
b1000 +"
b1000 k"
b0 1
b0 ~
b0 *"
b11110000 9
b11110000 !"
b11110000 ("
b11110000 i"
b11000 U"
b1100 T"
b101 c
b101 R"
b1001 ^
b1001 '"
b1001 7"
b1001 ="
b1001 C"
b1001 V"
b110 Z
b110 -"
b110 ["
b1000 \
b1000 ."
b1000 Y"
b0 b
b0 S"
b100 Y
b100 Z"
b100 v"
0g
b100000 .
b11100 0
b11100 ]"
b11100 e"
b11100 {"
b11100 m
b11100 I"
b11000 C
b11000 `"
b11100110000001001100011 K
b11100110000001001100011 8"
b11100110000001001100011 _"
b11100110000001001100011 f"
b1000 #
1!
#110000
b11100 z"
b11100 /
1%
b100 @
b100 N"
b100 ##
0!
#115000
05"
16"
0B"
1;"
0%
b0 R
b0 E"
0P
0>
1W
b0 h
b0 u
b0 $"
b100 k
b100 r
b100 t"
b100000 z"
b0 @
b0 N"
b0 ##
b0 A
b0 O"
b0 "#
b0 H"
0O
b0 S
b0 {
0Q
0?
b0 f
b0 v
b110 l
b110 q
b110 y
b1111 7
b1111 s"
b1111 x"
b0 /"
b0 V
b0 2"
b0 p"
b11110000 '
b11110000 r"
b11110000 w"
b11110000 !#
1\"
b100000 /
b0 g"
b0 :"
b0 9"
b0 >"
b0 @"
b0 ?"
b0 D"
b0 M
b0 <
b0 M"
b0 ~"
b0 =
b0 L"
b0 }"
b0 B
b0 J"
b0 D
b0 z
b0 L
b0 P"
b0 h"
b11100 U"
b11000 T"
b0 c
b0 R"
b100 ^
b100 '"
b100 7"
b100 ="
b100 C"
b100 V"
b111 Z
b111 -"
b111 ["
b110 \
b110 ."
b110 Y"
b100 b
b100 S"
b100 [
b100 X"
b100 q"
b1 i
b1 x
b1 Q"
0]
b1001 3
b1001 )"
b1001 +"
b1001 k"
b100 1
b100 ~
b100 *"
b1111 9
b1111 !"
b1111 ("
b1111 i"
b1000 *
b1000 ,"
b1000 n"
b1000 |"
b11110000 ,
b11110000 m"
1n
b0 m
b100 I"
b0 C
b0 `"
b0 K
b0 8"
b0 _"
b0 f"
b1001 #
1!
#120000
0!
#125000
b0 j
b0 p
1W
b0 h
b0 u
b0 $"
b100100 z"
0\"
b1111 '
b1111 r"
b1111 w"
b1111 !#
b0 7
b0 s"
b0 x"
b0 X
b0 &"
b0 y"
b0 k
b0 r
b0 t"
b10 l
b10 q
b10 y
bx ;
bx ^"
bx c"
b100100 /
0n
b1001 *
b1001 ,"
b1001 n"
b1001 |"
b1111 ,
b1111 m"
b100 3
b100 )"
b100 +"
b100 k"
b0 9
b0 !"
b0 ("
b0 i"
02
b100 U"
b0 T"
b0 ^
b0 '"
b0 7"
b0 ="
b0 C"
b0 V"
b0 Z
b0 -"
b0 ["
b0 \
b0 ."
b0 Y"
b0 b
b0 S"
b0 Y
b0 Z"
b0 v"
b0 [
b0 X"
b0 q"
b0 i
b0 x
b0 Q"
b100100 .
b100000 0
b100000 ]"
b100000 e"
b100000 {"
b1010 #
1!
#130000
0!
#135000
x4"
x6"
x5"
x;"
x<"
xA"
xB"
b101000 z"
bx @
bx N"
bx ##
bx A
bx O"
bx "#
b0xxxxx H"
b101000 /
b0 '
b0 r"
b0 w"
b0 !#
bx g"
bx :"
bx 9"
bx >"
bx @"
bx ?"
bx D"
bx M
bx <
bx M"
bx ~"
bx =
bx L"
bx }"
b0xxxx G"
bx N
bx B
bx J"
bx D
bx z
b101000 .
b100100 0
b100100 ]"
b100100 e"
b100100 {"
b0 3
b0 )"
b0 +"
b0 k"
b0 1
b0 ~
b0 *"
b100 *
b100 ,"
b100 n"
b100 |"
b0 ,
b0 m"
0(
b100000 m
b100100 I"
b100000 C
b100000 `"
bx K
bx 8"
bx _"
bx f"
b1011 #
1!
#140000
0!
#145000
bx j
bx p
xW
xt
xs
bx h
bx u
bx $"
b101100 z"
b0x00000 d
b0x00000 w
xe
bx f
bx v
bx X
bx &"
bx y"
bx k
bx r
bx t"
b101100 /
b0 *
b0 ,"
b0 n"
b0 |"
b100100 U"
b0xxxxx T"
b0xxxx c
b0xxxx R"
bx ^
bx '"
bx 7"
bx ="
bx C"
bx V"
bx Z
bx -"
bx ["
bx \
bx ."
bx Y"
bx Y
bx Z"
bx v"
bx [
bx X"
bx q"
b101100 .
b101000 0
b101000 ]"
b101000 e"
b101000 {"
b100100 m
b101000 I"
b100100 C
b100100 `"
b1100 #
1!
#150000
0!
#155000
b110000 z"
b110000 /
bx 7
bx s"
bx x"
b110000 .
b101100 0
b101100 ]"
b101100 e"
b101100 {"
b101000 U"
bx 3
bx )"
bx +"
bx k"
bx 1
bx ~
bx *"
bx 9
bx !"
bx ("
bx i"
b101000 m
b101100 I"
b101000 C
b101000 `"
b1101 #
1!
#160000
0!
#165000
b110100 z"
bx '
bx r"
bx w"
bx !#
b110100 /
bx *
bx ,"
bx n"
bx |"
bx ,
bx m"
b101100 U"
b110100 .
b110000 0
b110000 ]"
b110000 e"
b110000 {"
b101100 m
b110000 I"
b101100 C
b101100 `"
b1110 #
1!
#170000
0!
#175000
b111000 z"
b111000 /
b111000 .
b110100 0
b110100 ]"
b110100 e"
b110100 {"
b110000 U"
b110000 m
b110100 I"
b110000 C
b110000 `"
b1111 #
1!
#180000
0!
#185000
b111100 z"
b111100 /
b110100 U"
b111100 .
b111000 0
b111000 ]"
b111000 e"
b111000 {"
b110100 m
b111000 I"
b110100 C
b110100 `"
b10000 #
1!
#190000
0!
#195000
b1000000 z"
b1000000 /
b1000000 .
b111100 0
b111100 ]"
b111100 e"
b111100 {"
b111000 U"
b111000 m
b111100 I"
b111000 C
b111000 `"
b10001 #
1!
#200000
0!
#205000
b1000100 z"
b1000100 /
b111100 U"
b1000100 .
b1000000 0
b1000000 ]"
b1000000 e"
b1000000 {"
b111100 m
b1000000 I"
b111100 C
b111100 `"
b10010 #
1!
#210000
0!
#215000
b1001000 z"
b1001000 /
b1001000 .
b1000100 0
b1000100 ]"
b1000100 e"
b1000100 {"
b1000000 U"
b1000000 m
b1000100 I"
b1000000 C
b1000000 `"
b10011 #
1!
#220000
0!
#225000
b1001100 z"
b1001100 /
b1000100 U"
b1001100 .
b1001000 0
b1001000 ]"
b1001000 e"
b1001000 {"
b1000100 m
b1001000 I"
b1000100 C
b1000100 `"
b100000 $
b10100 #
1!
